<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java语言概述 on 主页</title>
    <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</link>
    <description>Recent content in Java语言概述 on 主页</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy; 2021 &lt;a href=&#34;javascript:void(0);&#34;&gt;ObitoSnn&lt;/a&gt;
</copyright>
    <lastBuildDate>Wed, 24 Feb 2021 12:37:00 +0800</lastBuildDate><atom:link href="https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java语言概述</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Wed, 24 Feb 2021 12:29:00 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</guid>
      <description>Java语言概述 基础常识  软件：即一系列按照特定顺序组织的计算机数据和指令的集合，系统软件和应用软件  系统软件：windows , mac os , linux ,unix,android,ios,&amp;hellip;. 应用软件：word ,ppt,画图板,&amp;hellip;    常用DOS命令：
   命令 描述     dir 列出当前目录下的文件以及文件夹   md 创建目录   rd 删除目录   cd 进入指定目录   cd.. 退回上一级目录   cd\ 返回到根目录   del 删除文件   exit 退出dos命令行   echo 字符串 &amp;gt; 文件名.扩展名 可以将字符串输入到后边指定的文件中    常用快捷键：
   命令 描述     ← → 移动光标   ↑ ↓ 调阅历史操作命令   delete和backspace 删除字符    计算机语言的发展迭代史  第一代：机器语言 第二代：汇编语言 第三代：高级语言  面向过程：C，Pascal，Fortran 面向对象：Java，JS，Python，Scala    Java语言版本迭代概述  1991年 Green项目，开发语言最初命名为Oak (橡树) 1994年，开发组意识到Oak 非常适合于互联网 1996年，发布JDK 1.</description>
    </item>
    
    <item>
      <title>开发环境的搭建</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Wed, 24 Feb 2021 12:39:54 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</guid>
      <description>开发环境的搭建（重点） JDK、JRE、JVM的关系 JDK的下载、安装  下载：官网，github 安装：傻瓜式安装：JDK、JRE （安装软件的路径中不能包含中文、空格）  path环境变量的配置 为什么配置path环境变量？ path环境变量：windows操作系统执行命令时所要搜寻的路径 为什么要配置path:希望java的开发工具（javac.exe,java.exe)在任何的文件路径下都可以执行成功
如何配置？ </description>
    </item>
    
    <item>
      <title>第一个Java程序</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/%E7%AC%AC%E4%B8%80%E4%B8%AAjava%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Wed, 24 Feb 2021 14:02:30 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/%E7%AC%AC%E4%B8%80%E4%B8%AAjava%E7%A8%8B%E5%BA%8F/</guid>
      <description>开发体验——HelloWorld 编写 创建一个java源文件：HelloWorld.javapublic class HelloWorld{public static void main(String[] args){System.out.println(&amp;quot;Hello,World!&amp;quot;);}} 编译 DOS命令行输入：javac HelloWorld.java
运行 DOS命令行输入：java HelloWorld
常见问题的解决 总结第一个程序  java程序编写-编译-运行的过程  编写：我们将编写的java代码保存在以&amp;quot;.java&amp;quot;结尾的源文件中 编译：使用javac.exe命令编译我们的java源文件。格式：javac 源文件名.java 运行：使用java.exe命令解释运行我们的字节码文件。 格式：java 类名   在一个java源文件中可以声明多个class。但是，只能最多有一个类声明为public的，而且要求声明为public的类的类名必须与源文件名相同 程序的入口是main()方法。格式是固定的 输出语句：  System.out.println():先输出数据，然后换行 System.out.print():只输出数据   每一行执行语句都以&amp;quot;;&amp;ldquo;结束 编译的过程：编译以后，会生成一个或多个字节码文件。字节码文件的文件名与java源文件中的类名相同  </description>
    </item>
    
    <item>
      <title>注释与API文档等</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/%E6%B3%A8%E9%87%8A%E4%B8%8Eapi%E6%96%87%E6%A1%A3%E7%AD%89/</link>
      <pubDate>Wed, 24 Feb 2021 14:05:16 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/%E6%B3%A8%E9%87%8A%E4%B8%8Eapi%E6%96%87%E6%A1%A3%E7%AD%89/</guid>
      <description>注释:Comment  分类：  单行注释：// 多行注释：/* */ 文档注释：/** */   作用：  对所写的程序进行解释说明，增强可读性。方便自己，方便别人 调试所写的代码   特点：  单行注释和多行注释，注释了的内容不参与编译。换句话说，编译以后生成的.class结尾的字节码文件中不包含注释掉的信息 注释内容可以被JDK提供的工具 javadoc 所解析，生成一套以网页文件形式体现的该程序的说明文档 多行注释不可以嵌套使用    Java API 文档 API:application programming interface。习惯上：将语言提供的类库，都称为api
API文档：针对于提供的类库如何使用，给的一个说明书。类似于《新华字典》
良好的编程风格 </description>
    </item>
    
  </channel>
</rss>
