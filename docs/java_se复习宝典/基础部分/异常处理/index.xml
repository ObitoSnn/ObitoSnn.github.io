<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>异常处理 on 主页</title>
    <link>https://ObitoSnn.github.io/docs/java_se%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
    <description>Recent content in 异常处理 on 主页</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy; 2021 &lt;a href=&#34;javascript:void(0);&#34;&gt;ObitoSnn&lt;/a&gt;
</copyright>
    <lastBuildDate>Wed, 31 Mar 2021 21:05:40 +0800</lastBuildDate><atom:link href="https://ObitoSnn.github.io/docs/java_se%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>异常</title>
      <link>https://ObitoSnn.github.io/docs/java_se%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/%E5%BC%82%E5%B8%B8/</link>
      <pubDate>Wed, 31 Mar 2021 21:10:00 +0800</pubDate>
      
      <guid>https://ObitoSnn.github.io/docs/java_se%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/%E5%BC%82%E5%B8%B8/</guid>
      <description>异常的体系结构 * java.lang.Throwable * |-----java.</description>
    </item>
    
    <item>
      <title>异常的处理</title>
      <link>https://ObitoSnn.github.io/docs/java_se%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/%E5%BC%82%E5%B8%B8%E7%9A%84%E5%A4%84%E7%90%86/</link>
      <pubDate>Wed, 31 Mar 2021 23:30:02 +0800</pubDate>
      
      <guid>https://ObitoSnn.github.io/docs/java_se%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/%E5%BC%82%E5%B8%B8%E7%9A%84%E5%A4%84%E7%90%86/</guid>
      <description>Java异常处理的抓抛模型  过程一：  &amp;ldquo;抛&amp;rdquo;：  程序在正常执行的过程中，一旦出现异常，就会在异常代码处生成一个对应异常类的对象，并将此对象抛出。一旦抛出对象以后，其后的代码就不再执行   关于异常对象的产生：  系统自动生成的异常对象 手动的生成一个异常对象，并抛出（throw）     过程二：  &amp;ldquo;抓&amp;rdquo;：  可以理解为异常的处理方式：①try-catch-finally ②throws      异常处理方式一：try-catch-finally 使用说明 try{ //可能出现异常的代码 }catch(异常类型1 变量名1){ //处理异常的方式1 }catch(异常类型2 变量名2){ //处理异常的方式2 }catch(异常类型3 变量名3){ //处理异常的方式3 } .</description>
    </item>
    
    <item>
      <title>手动抛出异常对象</title>
      <link>https://ObitoSnn.github.io/docs/java_se%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/%E6%89%8B%E5%8A%A8%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Thu, 01 Apr 2021 19:50:12 +0800</pubDate>
      
      <guid>https://ObitoSnn.github.io/docs/java_se%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/%E6%89%8B%E5%8A%A8%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8%E5%AF%B9%E8%B1%A1/</guid>
      <description>使用说明 在程序执行中，除了自动抛出异常对象的情况之外，我们还可以手动的throw一个异常类的对象
典型例题 class Student{ private int id; public void regist(int id) throws Exception { if(id &amp;gt; 0){ this.</description>
    </item>
    
    <item>
      <title>自定义异常类</title>
      <link>https://ObitoSnn.github.io/docs/java_se%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E7%B1%BB/</link>
      <pubDate>Thu, 01 Apr 2021 19:54:18 +0800</pubDate>
      
      <guid>https://ObitoSnn.github.io/docs/java_se%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E7%B1%BB/</guid>
      <description>如何自定义一个异常类  继承于现的异常结构：RuntimeException 、Exception 提供全局常量：serialVersionUID 提供重载的构造器  public class MyException extends Exception{ static final long serialVersionUID = -7034897193246939L; public MyException(){ } public MyException(String msg){ super(msg); } }  </description>
    </item>
    
  </channel>
</rss>
