<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>主页</title>
    <link>https://ObitoSnn.gitee.io/</link>
    <description>Recent content on 主页</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy; 2021 &lt;a href=&#34;javascript:void(0);&#34;&gt;ObitoSnn&lt;/a&gt;
</copyright>
    <lastBuildDate>Tue, 30 Mar 2021 21:14:05 +0800</lastBuildDate><atom:link href="https://ObitoSnn.gitee.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>代理模式</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8B/%E5%85%B3%E9%94%AE%E5%AD%97interface/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 30 Mar 2021 21:03:41 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8B/%E5%85%B3%E9%94%AE%E5%AD%97interface/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</guid>
      <description>解决的问题 代理模式是Java开发中使用较多的一种设计模式，代理设计就是为其他对象提供一种代理以控制对这个对象的访问
举例 interface NetWork{ public void browse(); } //被代理类 class Server implements NetWork{ @Override public void browse() { System.</description>
    </item>
    
    <item>
      <title>模板方法的设计模式</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8B/%E5%85%B3%E9%94%AE%E5%AD%97abstract/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 30 Mar 2021 20:18:44 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8B/%E5%85%B3%E9%94%AE%E5%AD%97abstract/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>解决的问题 在软件开发中实现一个算法时，整体步骤很固定、通用，这些步骤已经在父类中写好了。但是某些部分易变，易变部分可以抽象出来，供不同子类实现。这就是一种模板模式
举例 public abstract class Template{ //计算某段代码执行所需要花费的时间 public void spendTime(){ long start = System.</description>
    </item>
    
    <item>
      <title>属性的赋值顺序</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8B/%E7%B1%BB%E7%9A%84%E7%BB%93%E6%9E%84%E4%BB%A3%E7%A0%81%E5%9D%97/%E5%B1%9E%E6%80%A7%E7%9A%84%E8%B5%8B%E5%80%BC%E9%A1%BA%E5%BA%8F/</link>
      <pubDate>Sun, 28 Mar 2021 15:09:12 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8B/%E7%B1%BB%E7%9A%84%E7%BB%93%E6%9E%84%E4%BB%A3%E7%A0%81%E5%9D%97/%E5%B1%9E%E6%80%A7%E7%9A%84%E8%B5%8B%E5%80%BC%E9%A1%BA%E5%BA%8F/</guid>
      <description>默认初始化 显式初始化 构造器中初始化 有了对象以后，可以通过&amp;quot;对象.</description>
    </item>
    
    <item>
      <title>单例模式</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8B/%E5%85%B3%E9%94%AE%E5%AD%97static/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sun, 28 Mar 2021 13:36:36 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8B/%E5%85%B3%E9%94%AE%E5%AD%97static/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>设计模式的说明 理解 设计模式是在大量的实践中总结和理论化之后优化的代码结构、编程风格、以及解决问题的思考方式</description>
    </item>
    
    <item>
      <title>面向对象的特征二：继承性</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%AD/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%89%B9%E5%BE%81%E4%BA%8C%E7%BB%A7%E6%89%BF%E6%80%A7/</link>
      <pubDate>Sat, 27 Mar 2021 15:25:09 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%AD/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%89%B9%E5%BE%81%E4%BA%8C%E7%BB%A7%E6%89%BF%E6%80%A7/</guid>
      <description>为什么要有类的继承性？(继承性的好处）  减少了代码的冗余，提高了代码的复用性 便于功能的扩展 为之后多态性的使用，提供了前提  图示：</description>
    </item>
    
    <item>
      <title>属性赋值顺序</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8A/%E7%B1%BB%E7%9A%84%E7%BB%93%E6%9E%84%E4%B9%8B%E4%B8%89%E6%9E%84%E9%80%A0%E5%99%A8/%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC%E9%A1%BA%E5%BA%8F/</link>
      <pubDate>Thu, 25 Mar 2021 20:15:57 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8A/%E7%B1%BB%E7%9A%84%E7%BB%93%E6%9E%84%E4%B9%8B%E4%B8%89%E6%9E%84%E9%80%A0%E5%99%A8/%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC%E9%A1%BA%E5%BA%8F/</guid>
      <description>属性赋值的先后顺序  默认初始化 显式初始化 构造器中初始化 通过&amp;quot;对象.</description>
    </item>
    
    <item>
      <title>关键字：return</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8A/%E7%B1%BB%E7%9A%84%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E6%96%B9%E6%B3%95/%E5%85%B3%E9%94%AE%E5%AD%97return/</link>
      <pubDate>Sat, 27 Feb 2021 13:31:38 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8A/%E7%B1%BB%E7%9A%84%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E6%96%B9%E6%B3%95/%E5%85%B3%E9%94%AE%E5%AD%97return/</guid>
      <description> 使用范围：使用在方法体中 作用：  结束方法 针对于返回值类型的方法，使用&amp;quot;return 数据&amp;quot;方法返回所要的数据   注意点：return关键字后面不可以声明执行语句  </description>
    </item>
    
    <item>
      <title>JVM内存结构</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8A/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/jvm%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</link>
      <pubDate>Fri, 26 Feb 2021 23:18:10 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8A/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/jvm%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</guid>
      <description>编译完源程序以后，生成一个或多个字节码文件
我们使用JVM中的类的加载器和解释器对生成的字节码文件进行解释运行。意味着，需要将字节码文件对应的类加载到内存中，涉及到内存解析
《JVM规范》</description>
    </item>
    
    <item>
      <title>数组的概述</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E6%95%B0%E7%BB%84/%E6%95%B0%E7%BB%84%E7%9A%84%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Fri, 26 Feb 2021 19:29:11 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E6%95%B0%E7%BB%84/%E6%95%B0%E7%BB%84%E7%9A%84%E6%A6%82%E8%BF%B0/</guid>
      <description>数组的理解 数组(Array)，是多个相同类型数据按一定顺序排列的集合，并使用一个名字命名，并通过编号的方式对这些数据进行统一管理。
数组相关的概念  数组名 元素 角标、下标、索引 数组的长度：元素的个数  数组的特点  数组是有序排列的 数组属于引用数据类型的变量。数组的元素，既可以是基本数据类型，也可以是引用数据类型 创建数组对象会在内存中开辟一整块连续的空间 数组的长度一旦确定，就不能更改  数组的分类  按照维数：一维数组、二维数组、&amp;hellip; 按照数组元素的类型：基本数据类型元素的数组、引用数据类型元素的数组  数据结构 数据与数据之间的逻辑关系 集合、一对一、一对多、多对多</description>
    </item>
    
    <item>
      <title>分支结构</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/</link>
      <pubDate>Fri, 26 Feb 2021 16:10:35 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/</guid>
      <description>if-else条件判断结构 三种结构  结构一  if (条件表达式) {执行表达式}  结构二：二选一  if (条件表达式) {执行表达式1} else {执行表达式2}  结构三  if (条件表达式) {执行表达式1} else if (条件表达式) {执行表达式2} else if (条件表达式) {执行表达式3}.</description>
    </item>
    
    <item>
      <title>算术运算符</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Fri, 26 Feb 2021 14:57:21 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>算术运算符 + - * / % (前)++ (后)++ (前)&amp;ndash; (后)&amp;ndash;</description>
    </item>
    
    <item>
      <title>代码简洁之道</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E5%85%B3%E9%94%AE%E5%AD%97%E4%B8%8E%E6%A0%87%E8%AF%86%E7%AC%A6/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/</link>
      <pubDate>Fri, 26 Feb 2021 12:19:58 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E5%85%B3%E9%94%AE%E5%AD%97%E4%B8%8E%E6%A0%87%E8%AF%86%E7%AC%A6/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/</guid>
      <description>有意义的命名 介绍 软件中随处可见命名。我们给变量、函数、参数、类和包命名。我们给源代码及源代码所在目录命名。 这么多命名要做，不妨做好它。下文列出了取个好名字的几条简单规则。</description>
    </item>
    
    <item>
      <title>Java语言概述</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Wed, 24 Feb 2021 12:29:00 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</guid>
      <description>Java语言概述 基础常识  软件：即一系列按照特定顺序组织的计算机数据和指令的集合，系统软件和应用软件  系统软件：windows , mac os , linux ,unix,android,ios,&amp;hellip;.</description>
    </item>
    
    <item>
      <title>工厂的设计模式</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8B/%E5%85%B3%E9%94%AE%E5%AD%97interface/%E5%B7%A5%E5%8E%82%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 30 Mar 2021 21:11:09 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8B/%E5%85%B3%E9%94%AE%E5%AD%97interface/%E5%B7%A5%E5%8E%82%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>解决的问题 实现了创建者与调用者的分离，即将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的
具体模式  简单工厂模式：用来生产同一等级结构中的任意产品。（对于增加新的产品，需要修改已有代码） 工厂方法模式：用来生产同一等级结构中的固定产品。（支持增加任意产品) 抽象工厂模式：用来生产不同产品族的全部产品。（对于增加新的产品，无能为力；支持增加产品族)  </description>
    </item>
    
    <item>
      <title>方法的重写</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%AD/%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99/</link>
      <pubDate>Sat, 27 Mar 2021 15:42:27 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%AD/%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99/</guid>
      <description>什么是方法的重写(override)？ 子类继承父类以后，可以对父类中同名同参数的方法，进行覆盖操作
应用 重写以后，当创建子类对象以后，通过子类对象调用子父类中的同名同参数的方法时，实际执行的是子类重写父类的方法</description>
    </item>
    
    <item>
      <title>JavaBean的概念</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8A/%E7%B1%BB%E7%9A%84%E7%BB%93%E6%9E%84%E4%B9%8B%E4%B8%89%E6%9E%84%E9%80%A0%E5%99%A8/javabean%E7%9A%84%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Thu, 25 Mar 2021 20:43:58 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8A/%E7%B1%BB%E7%9A%84%E7%BB%93%E6%9E%84%E4%B9%8B%E4%B8%89%E6%9E%84%E9%80%A0%E5%99%A8/javabean%E7%9A%84%E6%A6%82%E5%BF%B5/</guid>
      <description>所谓JavaBean，是指符合如下标准的Java类
 类是公共的 一个无参的公共的构造器 属性，且对应的get、set方法  </description>
    </item>
    
    <item>
      <title>方法的重载</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8A/%E7%B1%BB%E7%9A%84%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E6%96%B9%E6%B3%95/%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD/</link>
      <pubDate>Sat, 27 Feb 2021 13:35:02 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8A/%E7%B1%BB%E7%9A%84%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E6%96%B9%E6%B3%95/%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD/</guid>
      <description>方法的重载的概念 定义：在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可
总结：&amp;ldquo;两同一不同&amp;rdquo;</description>
    </item>
    
    <item>
      <title>类的结构之一：属性</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8A/%E7%B1%BB%E7%9A%84%E7%BB%93%E6%9E%84%E4%B9%8B%E4%B8%80%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Fri, 26 Feb 2021 23:23:20 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8A/%E7%B1%BB%E7%9A%84%E7%BB%93%E6%9E%84%E4%B9%8B%E4%B8%80%E5%B1%9E%E6%80%A7/</guid>
      <description>类的设计中，两个重要结构之一：属性 对比：属性 vs 局部变量</description>
    </item>
    
    <item>
      <title>一维数组</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E6%95%B0%E7%BB%84/%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84/</link>
      <pubDate>Fri, 26 Feb 2021 19:37:22 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E6%95%B0%E7%BB%84/%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84/</guid>
      <description>一维数组的声明与初始化 正确的方式：
int num;//声明num = 10;//初始化int id = 1001;//声明 + 初始化int[] ids;//声明//1.</description>
    </item>
    
    <item>
      <title>循环结构</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</link>
      <pubDate>Fri, 26 Feb 2021 16:21:30 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</guid>
      <description>循环结构的四要素  ①初始化条件 ②循环条件 &amp;mdash;&amp;gt; 是boolean类型 ③循环体 ④迭代条件  说明：通常情况下，循环结束都是因为②中循环条件返回false了。</description>
    </item>
    
    <item>
      <title>赋值运算符</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Fri, 26 Feb 2021 15:06:15 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>赋值运算符 = += -= *= /= %=</description>
    </item>
    
    <item>
      <title>变量的使用（重点）</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E5%8F%98%E9%87%8F%E7%9A%84%E4%BD%BF%E7%94%A8%E9%87%8D%E7%82%B9/</link>
      <pubDate>Fri, 26 Feb 2021 13:57:31 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E5%8F%98%E9%87%8F%E7%9A%84%E4%BD%BF%E7%94%A8%E9%87%8D%E7%82%B9/</guid>
      <description>变量的分类 按数据类型分类 详细说明：</description>
    </item>
    
    <item>
      <title>开发环境的搭建</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Wed, 24 Feb 2021 12:39:54 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</guid>
      <description>开发环境的搭建（重点） JDK、JRE、JVM的关系 JDK的下载、安装  下载：官网，github 安装：傻瓜式安装：JDK、JRE （安装软件的路径中不能包含中文、空格）  path环境变量的配置 为什么配置path环境变量？ path环境变量：windows操作系统执行命令时所要搜寻的路径 为什么要配置path:希望java的开发工具（javac.</description>
    </item>
    
    <item>
      <title>关键字：final</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8B/%E5%85%B3%E9%94%AE%E5%AD%97final/</link>
      <pubDate>Sun, 28 Mar 2021 15:15:16 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8B/%E5%85%B3%E9%94%AE%E5%AD%97final/</guid>
      <description>final：最终的 可以用来修饰：类、方法、变量
final 用来修饰一个类：此类不能被其他类所继承 比如：String类、System类、StringBuffer</description>
    </item>
    
    <item>
      <title>关键字：super</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%AD/%E5%85%B3%E9%94%AE%E5%AD%97super/</link>
      <pubDate>Sat, 27 Mar 2021 16:19:12 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%AD/%E5%85%B3%E9%94%AE%E5%AD%97super/</guid>
      <description>super关键字的理解 super 关键字可以理解为：父类的</description>
    </item>
    
    <item>
      <title>可变个数形参的方法</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8A/%E7%B1%BB%E7%9A%84%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E6%96%B9%E6%B3%95/%E5%8F%AF%E5%8F%98%E4%B8%AA%E6%95%B0%E5%BD%A2%E5%8F%82%E7%9A%84%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 27 Feb 2021 13:43:38 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8A/%E7%B1%BB%E7%9A%84%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E6%96%B9%E6%B3%95/%E5%8F%AF%E5%8F%98%E4%B8%AA%E6%95%B0%E5%BD%A2%E5%8F%82%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
      <description>使用说明  jdk 5.</description>
    </item>
    
    <item>
      <title>二维数组</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E6%95%B0%E7%BB%84/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</link>
      <pubDate>Fri, 26 Feb 2021 19:44:18 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E6%95%B0%E7%BB%84/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</guid>
      <description>如何理解二维数组？  数组属于引用数据类型 数组的元素也可以是引用数据类型 一个一维数组A的元素如果还是一个一维数组类型的，则，此数组A称为二维数组。  二维数组的声明与初始化 正确的法式：</description>
    </item>
    
    <item>
      <title>关键字break和continue</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/%E5%85%B3%E9%94%AE%E5%AD%97break%E5%92%8Ccontinue/</link>
      <pubDate>Fri, 26 Feb 2021 16:55:39 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/%E5%85%B3%E9%94%AE%E5%AD%97break%E5%92%8Ccontinue/</guid>
      <description>break和continue关键字的使用    关键字 使用范围 循环中使用的作用(不同点) 相同点     break ①switch-case②循环结构中 结束当前循环 关键字后面不能声明执行语句   continue 循环结构中 结束本次循环 关键字后面不能声明执行语句    </description>
    </item>
    
    <item>
      <title>比较运算符</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Fri, 26 Feb 2021 15:10:02 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>比较运算符（关系运算符） == != &amp;gt; &amp;lt; &amp;gt;= &amp;lt;= instanceof</description>
    </item>
    
    <item>
      <title>进制（了解）</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%9B%E5%88%B6%E4%BA%86%E8%A7%A3/</link>
      <pubDate>Fri, 26 Feb 2021 14:33:45 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%9B%E5%88%B6%E4%BA%86%E8%A7%A3/</guid>
      <description>编程中涉及的进制及表示方式 二进制的使用说明  计算机底层的存储方式：所有数字在计算机底层都以二进制形式存在。 二进制数据的存储方式：所有的数值，不管正负，底层都以补码的方式存储。 原码、反码、补码的说明：  正数：三码合一 负数：  原码：直接将一个数值转换成二进制数，最高位是符号位 负数的反码：是对原码按位取反，只是最高位（符号位）确定为1 负数的补码：其反码加1      进制间的转换  图示： 图示二进制转换为十进制： 图示十进制转换为二进制： 二进制与八进制、十六进制间的转换：  </description>
    </item>
    
    <item>
      <title>第一个Java程序</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/%E7%AC%AC%E4%B8%80%E4%B8%AAjava%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Wed, 24 Feb 2021 14:02:30 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/%E7%AC%AC%E4%B8%80%E4%B8%AAjava%E7%A8%8B%E5%BA%8F/</guid>
      <description>开发体验——HelloWorld 编写 创建一个java源文件：HelloWorld.javapublic class HelloWorld{public static void main(String[] args){System.</description>
    </item>
    
    <item>
      <title>子类对象实例化全过程</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%AD/%E5%AD%90%E7%B1%BB%E5%AF%B9%E8%B1%A1%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%85%A8%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Sat, 27 Mar 2021 16:53:14 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%AD/%E5%AD%90%E7%B1%BB%E5%AF%B9%E8%B1%A1%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%85%A8%E8%BF%87%E7%A8%8B/</guid>
      <description>从结果上看：继承性  子类继承父类以后，就获取了父类中声明的属性或方法 创建子类的对象，在堆空间中，就会加载所父类中声明的属性  从过程上看 当我们通过子类的构造器创建子类对象时，我们一定会直接或间接的调用其父类的构造器，进而调用父类的父类的构造器，&amp;hellip;直到调用了java.</description>
    </item>
    
    <item>
      <title>Java的值传递机制</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8A/%E7%B1%BB%E7%9A%84%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E6%96%B9%E6%B3%95/java%E7%9A%84%E5%80%BC%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sat, 27 Feb 2021 13:57:20 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8A/%E7%B1%BB%E7%9A%84%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E6%96%B9%E6%B3%95/java%E7%9A%84%E5%80%BC%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/</guid>
      <description>针对于方法内变量的赋值举例 System.out.println(&amp;quot;***********基本数据类型：****************&amp;quot;);int m = 10;int n = m;System.</description>
    </item>
    
    <item>
      <title>数组的常见算法</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E6%95%B0%E7%BB%84/%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/</link>
      <pubDate>Fri, 26 Feb 2021 19:54:54 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E6%95%B0%E7%BB%84/%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/</guid>
      <description>数组的创建与元素赋值 杨辉三角（二维数组）、回形数（二维数组）、6个数，1-30之间随机生成且不重复。
针对于数值型的数组 最大值、最小值、总和、平均数等</description>
    </item>
    
    <item>
      <title>逻辑运算符</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Fri, 26 Feb 2021 15:36:23 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>逻辑运算符 &amp;amp; &amp;amp;&amp;amp; | || !</description>
    </item>
    
    <item>
      <title>注释与API文档等</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/%E6%B3%A8%E9%87%8A%E4%B8%8Eapi%E6%96%87%E6%A1%A3%E7%AD%89/</link>
      <pubDate>Wed, 24 Feb 2021 14:05:16 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/%E6%B3%A8%E9%87%8A%E4%B8%8Eapi%E6%96%87%E6%A1%A3%E7%AD%89/</guid>
      <description>注释:Comment  分类：  单行注释：// 多行注释：/* */ 文档注释：/** */   作用：  对所写的程序进行解释说明，增强可读性。方便自己，方便别人 调试所写的代码   特点：  单行注释和多行注释，注释了的内容不参与编译。换句话说，编译以后生成的.</description>
    </item>
    
    <item>
      <title>面向对象的特征三：多态性</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%AD/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%89%B9%E5%BE%81%E4%B8%89%E5%A4%9A%E6%80%81%E6%80%A7/</link>
      <pubDate>Sat, 27 Mar 2021 16:59:18 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%AD/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%89%B9%E5%BE%81%E4%B8%89%E5%A4%9A%E6%80%81%E6%80%A7/</guid>
      <description>多态性的理解 可以理解为一个事物的多种形态
何为多态性 对象的多态性：父类的引用指向子类的对象（或子类的对象赋给父类的引用）</description>
    </item>
    
    <item>
      <title>面向对象的特征一：封装性</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8A/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%89%B9%E5%BE%81%E4%B8%80%E5%B0%81%E8%A3%85%E6%80%A7/</link>
      <pubDate>Thu, 25 Mar 2021 19:34:30 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8A/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%89%B9%E5%BE%81%E4%B8%80%E5%B0%81%E8%A3%85%E6%80%A7/</guid>
      <description>面向对象的特征一：封装与隐藏 为什么要引入封装性？  我们程序设计追求“高内聚，低耦合”  高内聚：类的内部数据操作细节自己完成，不允许外部干涉 低耦合 ：仅对外暴露少量的方法用于使用   隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想  问题引入 当我们创建一个类的对象以后，我们可以通过&amp;quot;对象.</description>
    </item>
    
    <item>
      <title>递归方法</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8A/%E7%B1%BB%E7%9A%84%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E6%96%B9%E6%B3%95/%E9%80%92%E5%BD%92%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 27 Feb 2021 14:09:38 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8A/%E7%B1%BB%E7%9A%84%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E6%96%B9%E6%B3%95/%E9%80%92%E5%BD%92%E6%96%B9%E6%B3%95/</guid>
      <description>定义 递归方法：一个方法体内调用它自身。
如何理解递归方法  方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制 递归一定要向已知方向递归，否则这种递归就变成了无穷递归，类似于死循环  举例 // 例1：计算1-n之间所自然数的和public int getSum(int n) {if (n == 1) {return n;}return n + (getSum(n - 1));}// 例2：计算1-n之间所自然数的乘积:n!</description>
    </item>
    
    <item>
      <title>Arrays工具类的使用</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E6%95%B0%E7%BB%84/arrays%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 26 Feb 2021 20:26:19 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E6%95%B0%E7%BB%84/arrays%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>理解  定义在java.util包下 Arrays:提供了很多操作数组的方法  使用 //1.</description>
    </item>
    
    <item>
      <title>位运算符</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Fri, 26 Feb 2021 15:40:29 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>位运算符 &amp;laquo; &amp;raquo; &amp;raquo;&amp;gt; &amp;amp; | ^ ~</description>
    </item>
    
    <item>
      <title>类的结构：内部类</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8B/%E7%B1%BB%E7%9A%84%E7%BB%93%E6%9E%84%E5%86%85%E9%83%A8%E7%B1%BB/</link>
      <pubDate>Tue, 30 Mar 2021 21:14:05 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8B/%E7%B1%BB%E7%9A%84%E7%BB%93%E6%9E%84%E5%86%85%E9%83%A8%E7%B1%BB/</guid>
      <description>内部类 类的第五个成员
定义 Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类</description>
    </item>
    
    <item>
      <title>Object类的使用</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%AD/object%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 27 Mar 2021 17:51:19 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%AD/object%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>java.lang.Object类的说明  Object类是所Java类的根父类 如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.</description>
    </item>
    
    <item>
      <title>关键字：this</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8A/%E5%85%B3%E9%94%AE%E5%AD%97this/</link>
      <pubDate>Fri, 26 Mar 2021 19:22:47 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8A/%E5%85%B3%E9%94%AE%E5%AD%97this/</guid>
      <description>可以调用的结构 属性、方法、构造器
this调用属性、方法 this理解为：当前对象 或 当前正在创建的对象</description>
    </item>
    
    <item>
      <title>数组的常见异常</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E6%95%B0%E7%BB%84/%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8/</link>
      <pubDate>Fri, 26 Feb 2021 20:30:39 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E6%95%B0%E7%BB%84/%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8/</guid>
      <description>数组角标越界异常 ArrayIndexOutOfBoundsException
int[] arr = new int[]{1,2,3,4,5}; for(int i = 0;i &amp;lt;= arr.</description>
    </item>
    
    <item>
      <title>三元运算符</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Fri, 26 Feb 2021 15:44:46 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/%E8%BF%90%E7%AE%97%E7%AC%A6/%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>三元运算符 (条件表达式)? 表达式1 : 表达式2</description>
    </item>
    
    <item>
      <title>包装类的使用</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%AD/%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 28 Mar 2021 12:44:22 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%AD/%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>为什么要有包装类(或封装类） 为了使基本数据类型的变量具有类的特征，引入包装类
基本数据类型与对应的包装类    基本数据类型 包装类     byte Byte   short Short   int Integer   long Long   float Float   double Double   boolean Boolean   char Character    需要掌握的类型间的转换：（基本数据类型、包装类、String） 基本数据类型&amp;lt;&amp;mdash;&amp;gt;包装类：JDK 5.</description>
    </item>
    
    <item>
      <title>关键字：package、import</title>
      <link>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8A/%E5%85%B3%E9%94%AE%E5%AD%97packageimport/</link>
      <pubDate>Fri, 26 Mar 2021 19:51:19 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/docs/java%E5%A4%8D%E4%B9%A0%E5%AE%9D%E5%85%B8/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E4%B8%8A/%E5%85%B3%E9%94%AE%E5%AD%97packageimport/</guid>
      <description>package的使用  为了更好的实现项目中类的管理，提供包的概念 使用package声明类或接口所属的包，声明在源文件的首行 包，属于标识符，遵循标识符的命名规则、规范(xxxyyyzzz)&amp;ldquo;见名知意&amp;rdquo; 每&amp;quot;.</description>
    </item>
    
    <item>
      <title>浅谈Map</title>
      <link>https://ObitoSnn.gitee.io/posts/%E6%B5%85%E8%B0%88map/</link>
      <pubDate>Wed, 24 Feb 2021 14:19:01 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/posts/%E6%B5%85%E8%B0%88map/</guid>
      <description>Map接口 双列集合，用来存储一对(key - value)一对的数据</description>
    </item>
    
    <item>
      <title>JDBC——针对不同表的通用查询操作，返回多条数据</title>
      <link>https://ObitoSnn.gitee.io/posts/jdbc%E9%92%88%E5%AF%B9%E4%B8%8D%E5%90%8C%E8%A1%A8%E7%9A%84%E9%80%9A%E7%94%A8%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C%E8%BF%94%E5%9B%9E%E5%A4%9A%E6%9D%A1%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Wed, 24 Feb 2021 14:17:11 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/posts/jdbc%E9%92%88%E5%AF%B9%E4%B8%8D%E5%90%8C%E8%A1%A8%E7%9A%84%E9%80%9A%E7%94%A8%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C%E8%BF%94%E5%9B%9E%E5%A4%9A%E6%9D%A1%E6%95%B0%E6%8D%AE/</guid>
      <description>思路： ① 获取连接 ② 预编译SQL返回PreparedStatement实例 ③ 处理占位符 ④ 执行操作返回ResultSet并处理结果集 ⑤ 关闭资源</description>
    </item>
    
    <item>
      <title>Java 反射机制——动态代理举例</title>
      <link>https://ObitoSnn.gitee.io/posts/java-%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%BE%E4%BE%8B/</link>
      <pubDate>Wed, 24 Feb 2021 14:15:32 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/posts/java-%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%BE%E4%BE%8B/</guid>
      <description>思路： 实现动态代理需要解决的问题： 问题一：如何根据内存中加载的被代理类，动态的创建代理类及其对象。 问题二：当代理类的对象调用方法a时，如何动态的调用被代理类中声明的方法a。</description>
    </item>
    
    <item>
      <title>Java TCP网络编程——客户端发送文件给服务端，服务端将文件保存在本地</title>
      <link>https://ObitoSnn.gitee.io/posts/java-tcp%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E9%80%81%E6%96%87%E4%BB%B6%E7%BB%99%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%B0%86%E6%96%87%E4%BB%B6%E4%BF%9D%E5%AD%98%E5%9C%A8%E6%9C%AC%E5%9C%B0/</link>
      <pubDate>Wed, 24 Feb 2021 14:10:11 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/posts/java-tcp%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E9%80%81%E6%96%87%E4%BB%B6%E7%BB%99%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%B0%86%E6%96%87%E4%BB%B6%E4%BF%9D%E5%AD%98%E5%9C%A8%E6%9C%AC%E5%9C%B0/</guid>
      <description>思路： ①创建客户端Socket与服务端ServerSocket；调用相应的get方法获取流； ②处理数据：先确定要处理的数据(文本文件、非文本文件或字符串)，确定后考虑使用相应的流处理。补充：本次以处理图片为例(非文本文件)。 ③关闭资源。</description>
    </item>
    
    <item>
      <title>Object类概述</title>
      <link>https://ObitoSnn.gitee.io/posts/object%E7%B1%BB%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Tue, 23 Feb 2021 22:22:48 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/posts/object%E7%B1%BB%E6%A6%82%E8%BF%B0/</guid>
      <description>Object类概述 Object在java.lang包下，Object类是所有类的根类。每个类都使用 Object 作为父类(超类)</description>
    </item>
    
    <item>
      <title>Java IO流——获取文本上字符出现的次数,把数据写入文件</title>
      <link>https://ObitoSnn.gitee.io/posts/java-io%E6%B5%81%E8%8E%B7%E5%8F%96%E6%96%87%E6%9C%AC%E4%B8%8A%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E6%8A%8A%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6/</link>
      <pubDate>Tue, 23 Feb 2021 22:22:30 +0800</pubDate>
      
      <guid>https://ObitoSnn.gitee.io/posts/java-io%E6%B5%81%E8%8E%B7%E5%8F%96%E6%96%87%E6%9C%AC%E4%B8%8A%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E6%8A%8A%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6/</guid>
      <description>思路： ①创建文件及相应的流。 ②处理数据：读入和写出。补充：处理文本中字符出现的次数(方式一：将文本文件的字符添加到list，再将字符作为key存入map中，value为字符出现次数；方式二：也可以直接将读入字符存入map中) ③关闭资源。</description>
    </item>
    
  </channel>
</rss>
