<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ObitoSnn on 主页</title>
    <link>https://ObitoSnn.github.io/authors/obitosnn/</link>
    <description>Recent content in ObitoSnn on 主页</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy; 2021 &lt;a href=&#34;javascript:void(0);&#34;&gt;ObitoSnn&lt;/a&gt;
</copyright>
    <lastBuildDate>Sun, 06 Jun 2021 00:59:05 +0800</lastBuildDate><atom:link href="https://ObitoSnn.github.io/authors/obitosnn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git中对于删除首次提交的看法</title>
      <link>https://ObitoSnn.github.io/posts/git%E4%B8%AD%E5%AF%B9%E4%BA%8E%E5%88%A0%E9%99%A4%E9%A6%96%E6%AC%A1%E6%8F%90%E4%BA%A4%E7%9A%84%E7%9C%8B%E6%B3%95/</link>
      <pubDate>Sun, 06 Jun 2021 00:59:05 +0800</pubDate>
      
      <guid>https://ObitoSnn.github.io/posts/git%E4%B8%AD%E5%AF%B9%E4%BA%8E%E5%88%A0%E9%99%A4%E9%A6%96%E6%AC%A1%E6%8F%90%E4%BA%A4%E7%9A%84%E7%9C%8B%E6%B3%95/</guid>
      <description>update-ref指令：
git update-ref -d HEAD 它将删除命名引用。HEAD，所以它会重新设置(轻轻地，不会丢失工作当前分支的所有提交</description>
    </item>
    
    <item>
      <title>Linux（CentOS7）安装JDK、MySQL、Tomcat</title>
      <link>https://ObitoSnn.github.io/posts/linuxcentos7%E5%AE%89%E8%A3%85jdkmysqltomcat/</link>
      <pubDate>Sun, 25 Apr 2021 15:35:56 +0800</pubDate>
      
      <guid>https://ObitoSnn.github.io/posts/linuxcentos7%E5%AE%89%E8%A3%85jdkmysqltomcat/</guid>
      <description>前言 为了模拟远程操作，在Windows环境下使用远程工具连接Linux，所以在正式安装前需要准备两个远程工具(Xshell和Xftp)，使用Xshell远程控制Linux，使用Xftp将文件传输至Linux。当然你也可以直接在Linux中下载所需文件
安装JDK JDK官网下载地址 JDK 8</description>
    </item>
    
    <item>
      <title>浅谈Map</title>
      <link>https://ObitoSnn.github.io/posts/%E6%B5%85%E8%B0%88map/</link>
      <pubDate>Wed, 24 Feb 2021 14:19:01 +0800</pubDate>
      
      <guid>https://ObitoSnn.github.io/posts/%E6%B5%85%E8%B0%88map/</guid>
      <description>Map接口 双列集合，用来存储一对(key - value)一对的数据</description>
    </item>
    
    <item>
      <title>JDBC——针对不同表的通用查询操作，返回多条数据</title>
      <link>https://ObitoSnn.github.io/posts/jdbc%E9%92%88%E5%AF%B9%E4%B8%8D%E5%90%8C%E8%A1%A8%E7%9A%84%E9%80%9A%E7%94%A8%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C%E8%BF%94%E5%9B%9E%E5%A4%9A%E6%9D%A1%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Wed, 24 Feb 2021 14:17:11 +0800</pubDate>
      
      <guid>https://ObitoSnn.github.io/posts/jdbc%E9%92%88%E5%AF%B9%E4%B8%8D%E5%90%8C%E8%A1%A8%E7%9A%84%E9%80%9A%E7%94%A8%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C%E8%BF%94%E5%9B%9E%E5%A4%9A%E6%9D%A1%E6%95%B0%E6%8D%AE/</guid>
      <description>思路： ① 获取连接 ② 预编译SQL返回PreparedStatement实例 ③ 处理占位符 ④ 执行操作返回ResultSet并处理结果集 ⑤ 关闭资源</description>
    </item>
    
    <item>
      <title>Java 反射机制——动态代理举例</title>
      <link>https://ObitoSnn.github.io/posts/java-%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%BE%E4%BE%8B/</link>
      <pubDate>Wed, 24 Feb 2021 14:15:32 +0800</pubDate>
      
      <guid>https://ObitoSnn.github.io/posts/java-%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%BE%E4%BE%8B/</guid>
      <description>思路： 实现动态代理需要解决的问题： 问题一：如何根据内存中加载的被代理类，动态的创建代理类及其对象。 问题二：当代理类的对象调用方法a时，如何动态的调用被代理类中声明的方法a。</description>
    </item>
    
    <item>
      <title>Java TCP网络编程——客户端发送文件给服务端，服务端将文件保存在本地</title>
      <link>https://ObitoSnn.github.io/posts/java-tcp%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E9%80%81%E6%96%87%E4%BB%B6%E7%BB%99%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%B0%86%E6%96%87%E4%BB%B6%E4%BF%9D%E5%AD%98%E5%9C%A8%E6%9C%AC%E5%9C%B0/</link>
      <pubDate>Wed, 24 Feb 2021 14:10:11 +0800</pubDate>
      
      <guid>https://ObitoSnn.github.io/posts/java-tcp%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E9%80%81%E6%96%87%E4%BB%B6%E7%BB%99%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%B0%86%E6%96%87%E4%BB%B6%E4%BF%9D%E5%AD%98%E5%9C%A8%E6%9C%AC%E5%9C%B0/</guid>
      <description>思路： ①创建客户端Socket与服务端ServerSocket；调用相应的get方法获取流； ②处理数据：先确定要处理的数据(文本文件、非文本文件或字符串)，确定后考虑使用相应的流处理。补充：本次以处理图片为例(非文本文件)。 ③关闭资源。</description>
    </item>
    
    <item>
      <title>Object类概述</title>
      <link>https://ObitoSnn.github.io/posts/object%E7%B1%BB%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Tue, 23 Feb 2021 22:22:48 +0800</pubDate>
      
      <guid>https://ObitoSnn.github.io/posts/object%E7%B1%BB%E6%A6%82%E8%BF%B0/</guid>
      <description>Object类概述 Object在java.lang包下，Object类是所有类的根类。每个类都使用 Object 作为父类(超类)</description>
    </item>
    
    <item>
      <title>Java IO流——获取文本上字符出现的次数,把数据写入文件</title>
      <link>https://ObitoSnn.github.io/posts/java-io%E6%B5%81%E8%8E%B7%E5%8F%96%E6%96%87%E6%9C%AC%E4%B8%8A%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E6%8A%8A%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6/</link>
      <pubDate>Tue, 23 Feb 2021 22:22:30 +0800</pubDate>
      
      <guid>https://ObitoSnn.github.io/posts/java-io%E6%B5%81%E8%8E%B7%E5%8F%96%E6%96%87%E6%9C%AC%E4%B8%8A%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E6%8A%8A%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6/</guid>
      <description>思路： ①创建文件及相应的流。 ②处理数据：读入和写出。补充：处理文本中字符出现的次数(方式一：将文本文件的字符添加到list，再将字符作为key存入map中，value为字符出现次数；方式二：也可以直接将读入字符存入map中) ③关闭资源。</description>
    </item>
    
  </channel>
</rss>
